// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using WeatherGovAPI;
//
//    var welcome = Welcome.FromJson(jsonString);

namespace WeatherGovAPI
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Welcome
    {
        [JsonProperty("@context")]
        public List<ContextElement> Context { get; set; }

        [JsonProperty("id")]
        public Uri Id { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("geometry")]
        public Geometry Geometry { get; set; }

        [JsonProperty("properties")]
        public WelcomeProperties Properties { get; set; }
    }

    public partial class ContextClass
    {
        [JsonProperty("wx")]
        public Uri Wx { get; set; }

        [JsonProperty("s")]
        public Uri S { get; set; }

        [JsonProperty("geo")]
        public Uri Geo { get; set; }

        [JsonProperty("unit")]
        public Uri Unit { get; set; }

        [JsonProperty("@vocab")]
        public Uri Vocab { get; set; }

        [JsonProperty("geometry")]
        public Distance Geometry { get; set; }

        [JsonProperty("city")]
        public string City { get; set; }

        [JsonProperty("state")]
        public string State { get; set; }

        [JsonProperty("distance")]
        public Distance Distance { get; set; }

        [JsonProperty("bearing")]
        public CountyClass Bearing { get; set; }

        [JsonProperty("value")]
        public Value Value { get; set; }

        [JsonProperty("unitCode")]
        public Distance UnitCode { get; set; }

        [JsonProperty("forecastOffice")]
        public CountyClass ForecastOffice { get; set; }

        [JsonProperty("forecastGridData")]
        public CountyClass ForecastGridData { get; set; }

        [JsonProperty("publicZone")]
        public CountyClass PublicZone { get; set; }

        [JsonProperty("county")]
        public CountyClass County { get; set; }
    }

    public partial class CountyClass
    {
        [JsonProperty("@type")]
        public string Type { get; set; }
    }

    public partial class Distance
    {
        [JsonProperty("@id")]
        public string Id { get; set; }

        [JsonProperty("@type")]
        public string Type { get; set; }
    }

    public partial class Value
    {
        [JsonProperty("@id")]
        public string Id { get; set; }
    }

    public partial class Geometry
    {
        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("coordinates")]
        public List<double> Coordinates { get; set; }
    }

    public partial class WelcomeProperties
    {
        [JsonProperty("@id")]
        public Uri Id { get; set; }

        [JsonProperty("@type")]
        public string Type { get; set; }

        [JsonProperty("cwa")]
        public string Cwa { get; set; }

        [JsonProperty("forecastOffice")]
        public Uri ForecastOffice { get; set; }

        [JsonProperty("gridX")]
        public long GridX { get; set; }

        [JsonProperty("gridY")]
        public long GridY { get; set; }

        [JsonProperty("forecast")]
        public Uri Forecast { get; set; }

        [JsonProperty("forecastHourly")]
        public Uri ForecastHourly { get; set; }

        [JsonProperty("forecastGridData")]
        public Uri ForecastGridData { get; set; }

        [JsonProperty("observationStations")]
        public Uri ObservationStations { get; set; }

        [JsonProperty("relativeLocation")]
        public RelativeLocation RelativeLocation { get; set; }

        [JsonProperty("forecastZone")]
        public Uri ForecastZone { get; set; }

        [JsonProperty("county")]
        public Uri County { get; set; }

        [JsonProperty("fireWeatherZone")]
        public Uri FireWeatherZone { get; set; }

        [JsonProperty("timeZone")]
        public string TimeZone { get; set; }

        [JsonProperty("radarStation")]
        public string RadarStation { get; set; }
    }

    public partial class RelativeLocation
    {
        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("geometry")]
        public Geometry Geometry { get; set; }

        [JsonProperty("properties")]
        public RelativeLocationProperties Properties { get; set; }
    }

    public partial class RelativeLocationProperties
    {
        [JsonProperty("city")]
        public string City { get; set; }

        [JsonProperty("state")]
        public string State { get; set; }

        [JsonProperty("distance")]
        public DistanceClass Distance { get; set; }

        [JsonProperty("bearing")]
        public DistanceClass Bearing { get; set; }
    }

    public partial class DistanceClass
    {
        [JsonProperty("value")]
        public double Value { get; set; }

        [JsonProperty("unitCode")]
        public string UnitCode { get; set; }
    }

    public partial struct ContextElement
    {
        public ContextClass ContextClass;
        public Uri PurpleUri;

        public static implicit operator ContextElement(ContextClass ContextClass) => new ContextElement { ContextClass = ContextClass };
        public static implicit operator ContextElement(Uri PurpleUri) => new ContextElement { PurpleUri = PurpleUri };
    }

    public partial class Welcome
    {
        public static Welcome FromJson(string json) => JsonConvert.DeserializeObject<Welcome>(json, WeatherGovAPI.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Welcome self) => JsonConvert.SerializeObject(self, WeatherGovAPI.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                ContextElementConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ContextElementConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ContextElement) || t == typeof(ContextElement?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    try
                    {
                        var uri = new Uri(stringValue);
                        return new ContextElement { PurpleUri = uri };
                    }
                    catch (UriFormatException) { }
                    break;
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<ContextClass>(reader);
                    return new ContextElement { ContextClass = objectValue };
            }
            throw new Exception("Cannot unmarshal type ContextElement");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (ContextElement)untypedValue;
            if (value.PurpleUri != null)
            {
                serializer.Serialize(writer, value.PurpleUri.ToString());
                return;
            }
            if (value.ContextClass != null)
            {
                serializer.Serialize(writer, value.ContextClass);
                return;
            }
            throw new Exception("Cannot marshal type ContextElement");
        }

        public static readonly ContextElementConverter Singleton = new ContextElementConverter();
    }
}
