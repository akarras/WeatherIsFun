// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using WeatherGovAPI;
//
//    var welcome = Welcome.FromJson(jsonString);

namespace WeatherGovAPI
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Forecast
    {
        [JsonProperty("@context")]
        public List<ContextElement> Context { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("geometry")]
        public WelcomeGeometry Geometry { get; set; }

        [JsonProperty("properties")]
        public Properties Properties { get; set; }
    }

    public partial class WelcomeGeometry
    {
        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("geometries")]
        public List<GeometryElement> Geometries { get; set; }
    }

    public partial class GeometryElement
    {
        [JsonProperty("type")]
        public string Type { get; set; }

    }

    public partial class Properties
    {
        [JsonProperty("updated")]
        public DateTimeOffset Updated { get; set; }

        [JsonProperty("units")]
        public string Units { get; set; }

        [JsonProperty("forecastGenerator")]
        public string ForecastGenerator { get; set; }

        [JsonProperty("generatedAt")]
        public DateTimeOffset GeneratedAt { get; set; }

        [JsonProperty("updateTime")]
        public DateTimeOffset UpdateTime { get; set; }

        [JsonProperty("validTimes")]
        public string ValidTimes { get; set; }

        [JsonProperty("elevation")]
        public Elevation Elevation { get; set; }

        [JsonProperty("periods")]
        public List<Period> Periods { get; set; }
    }

    public partial class Elevation
    {
        [JsonProperty("value")]
        public double Value { get; set; }

        [JsonProperty("unitCode")]
        public string UnitCode { get; set; }
    }

    public partial class Period
    {
        [JsonProperty("number")]
        public long Number { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("startTime")]
        public DateTimeOffset StartTime { get; set; }

        [JsonProperty("endTime")]
        public DateTimeOffset EndTime { get; set; }

        [JsonProperty("isDaytime")]
        public bool IsDaytime { get; set; }

        [JsonProperty("temperature")]
        public long Temperature { get; set; }

        [JsonProperty("temperatureUnit")]
        public TemperatureUnit TemperatureUnit { get; set; }

        [JsonProperty("temperatureTrend")]
        public object TemperatureTrend { get; set; }

        [JsonProperty("windSpeed")]
        public string WindSpeed { get; set; }

        [JsonProperty("windDirection")]
        public string WindDirection { get; set; }

        [JsonProperty("icon")]
        public Uri Icon { get; set; }

        [JsonProperty("shortForecast")]
        public string ShortForecast { get; set; }

        [JsonProperty("detailedForecast")]
        public string DetailedForecast { get; set; }
    }

    public enum TemperatureUnit { F };

    public partial struct Coordinate
    {
        public double? Double;
        public List<List<double>> DoubleArrayArray;

        public static implicit operator Coordinate(double Double) => new Coordinate { Double = Double };
        public static implicit operator Coordinate(List<List<double>> DoubleArrayArray) => new Coordinate { DoubleArrayArray = DoubleArrayArray };
    }

    public partial class Forecast
    {
        public static Forecast FromJson(string json) => JsonConvert.DeserializeObject<Forecast>(json, WeatherGovAPI.Converter.Settings);
    }

    internal class TemperatureUnitConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TemperatureUnit) || t == typeof(TemperatureUnit?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "F")
            {
                return TemperatureUnit.F;
            }
            throw new Exception("Cannot unmarshal type TemperatureUnit");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TemperatureUnit)untypedValue;
            if (value == TemperatureUnit.F)
            {
                serializer.Serialize(writer, "F");
                return;
            }
            throw new Exception("Cannot marshal type TemperatureUnit");
        }

        public static readonly TemperatureUnitConverter Singleton = new TemperatureUnitConverter();
    }
}
